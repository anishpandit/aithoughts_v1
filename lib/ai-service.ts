import OpenAI from 'openai';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface AIGenerationResult {
  success: boolean;
  data?: {
    title: string;
    content: string;
    description: string;
    excerpt: string;
    tags: string[];
    readTime: number;
    images?: string[];
    videos?: string[];
    enhancedPrompt?: string;
  };
  error?: string;
}


export async function generateNewsletterContent(
  prompt: string, 
  customTitle?: string
): Promise<AIGenerationResult> {
  try {
    if (!process.env.OPENAI_API_KEY) {
      return {
        success: false,
        error: 'OpenAI API key not configured. Please set OPENAI_API_KEY environment variable.'
      };
    }

    const systemPrompt = `You are a professional newsletter writer and content creator. Your task is to create high-quality, engaging newsletter content based on user prompts.

IMPORTANT GUIDELINES:
- Write as a human expert, not as an AI
- Never mention that the content is AI-generated
- Never use meta-referential language about AI or generation
- Focus on providing real value and insights
- Use a professional, engaging tone
- Structure content with clear headings and sections
- Include actionable insights and practical information
- Write in markdown format
- Keep content informative and well-researched
- Avoid generic templates or placeholder content

Your response should be a complete newsletter article that someone would actually want to read and share.`;

    const userPrompt = `Create a comprehensive newsletter article about: "${prompt}"

${customTitle ? `Use this title: "${customTitle}"` : 'Generate an engaging title for this topic.'}

The newsletter should:
- Be informative and well-researched
- Include practical insights and actionable advice
- Have a clear structure with headings
- Be engaging and professional
- Provide real value to readers
- Be 800-1500 words in length


Format your response as a complete newsletter article in markdown.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    });

    const generatedContent = completion.choices[0]?.message?.content;
    
    if (!generatedContent) {
      return {
        success: false,
        error: 'No content generated by AI'
      };
    }

    // Extract title from content (first heading)
    const titleMatch = generatedContent.match(/^#\s+(.+)$/m);
    const title = titleMatch ? titleMatch[1] : (customTitle || prompt);

    // Create description (first paragraph or excerpt)
    const description = generatedContent
      .replace(/^#.*$/m, '') // Remove title
      .replace(/^##.*$/gm, '') // Remove all headings
      .trim()
      .split('\n')[0]
      .slice(0, 150) + '...';

    // Create excerpt (first 200 characters of content)
    const excerpt = generatedContent
      .replace(/^#.*$/m, '') // Remove title
      .replace(/^##.*$/gm, '') // Remove all headings
      .trim()
      .slice(0, 200) + '...';

    // Estimate read time (average 200 words per minute)
    const wordCount = generatedContent.split(/\s+/).length;
    const readTime = Math.max(1, Math.ceil(wordCount / 200));

    // Generate relevant tags based on content
    const tags = generateTagsFromContent(generatedContent, prompt);

    // No image generation - just return the content as-is
    const finalContent = generatedContent;

    return {
      success: true,
      data: {
        title,
        content: finalContent,
        description,
        excerpt,
        tags,
        readTime,
        images: undefined,
        videos: undefined
      }
    };

  } catch (error) {
    console.error('Error generating newsletter content:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate content'
    };
  }
}

function generateTagsFromContent(content: string, prompt: string): string[] {
  const tags = new Set<string>();
  
  // Add tags based on prompt keywords
  const promptWords = prompt.toLowerCase().split(/\s+/);
  promptWords.forEach(word => {
    if (word.length > 3) {
      tags.add(word);
    }
  });

  // Add common newsletter tags
  tags.add('newsletter');
  tags.add('insights');

  // Add technology-related tags if content mentions tech
  if (content.toLowerCase().includes('technology') || content.toLowerCase().includes('tech')) {
    tags.add('technology');
  }

  if (content.toLowerCase().includes('ai') || content.toLowerCase().includes('artificial intelligence')) {
    tags.add('ai');
  }

  if (content.toLowerCase().includes('business') || content.toLowerCase().includes('startup')) {
    tags.add('business');
  }

  return Array.from(tags).slice(0, 5); // Limit to 5 tags
}

